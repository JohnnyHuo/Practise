public class Solution{
  public Node commonAncestor(Node root, int n1, int n2){
    if(root == null)  return null;
	
    if(root.val < n1 && root.val < n2){
		return commonAncestor(root.right, n1, n2);
	}else if(root.val > n1 && root.val > n2){
		return commonAncestor(root.left, n1, n2);
	}else if(root.val > n1 && root.val < n2){
		return root;
	}else if(root.val == n1 || root.val == n2){
		return root;
	}
	
  }
}

//___________________________________其实上面的最后面两种情都可以用else概括了, 如下___________________
public void findLca(Node node, int t1, int t2) {
    if(node == null {
        return null;
    }
    if(node.value > t2 && node.value > t1) {
        // both targets are left
        return findLca(node.left, t1, t2);
    } else if (node.value < t2 && node.value < t1) {
        // both targets are right
        return findLca(node.right, t1, t2);
    } else {
        // either we are diverging or both targets are equal
        // in both cases so we've found the LCA
        // check for actual existence of targets here, if you like
        return node;
    }
}
