/*
public static int getHeight(TreeNode root){
	if (root == null) return 0;   //base case
	
	return Math.max(getHeight(root.left), getHeight(root.right))+1;
}

public static boolean isBalanced(TreeNode root){
	if(root == null)	return true;
	int heightDiff = Math.abs(getHeight(root.left) - getHeight(root.right));
	if (heightDiff > 1){
		return false;
	}else{
		return isBalanced(root.left) && isBalanced(root.right);
	}
}
*/

// O(N) 

public static int getHeight(TreeNode root){
	if (root == null) return 0;   //base case
	
	if (getHeight(root.left) == -1)	 return -1;
	if (getHeight(root.right) == -1) return -1;
	
	int heightDiff = getHeight(root.left) - getHeight(root.right);
	if(Math.abs(heightDiff) > 1){
		return -1;
	}else{
		return Math.max(getHeight(root.left), getHeight(root.right)) + 1;
	}
	
}

public static boolean isBalanced(TreeNode root){
	if(getHeight(root) == -1)  return false;
	else{
		return true;
	}
}
